// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: companies.sql

package db

import (
	"context"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateCompany(ctx context.Context, name string) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany, name)
	var i Company
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const getCompanies = `-- name: GetCompanies :many
SELECT id, name FROM companies
ORDER BY id
`

func (q *Queries) GetCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompaniesByNameOrId = `-- name: GetCompaniesByNameOrId :many
SELECT id, name FROM companies
WHERE name = $1 OR id = $1
ORDER BY id
`

func (q *Queries) GetCompaniesByNameOrId(ctx context.Context, name string) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesByNameOrId, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: GetCompany :one
SELECT id, name FROM companies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCompanyById = `-- name: GetCompanyById :one
SELECT id, name FROM companies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompanyById(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyById, id)
	var i Company
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCompanyByName = `-- name: GetCompanyByName :one
SELECT id, name FROM companies
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCompanyByName(ctx context.Context, name string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByName, name)
	var i Company
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCompanyByNameOrId = `-- name: GetCompanyByNameOrId :one
SELECT id, name FROM companies
WHERE name = $1 OR id = $1 LIMIT 1
`

func (q *Queries) GetCompanyByNameOrId(ctx context.Context, name string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByNameOrId, name)
	var i Company
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateCompanyParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, updateCompany, arg.ID, arg.Name)
	var i Company
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
