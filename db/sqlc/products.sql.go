// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price, created_at, updated_at, owner_id, company_id, image_link, available_stocks, is_negotiable)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, name, image_link, description, available_stocks, price, is_negotiable, owner_id, company_id, likes, sold, created_at, updated_at
`

type CreateProductParams struct {
	Name            string             `db:"name" json:"name"`
	Description     string             `db:"description" json:"description"`
	Price           int32              `db:"price" json:"price"`
	CreatedAt       pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	OwnerID         int32              `db:"owner_id" json:"owner_id"`
	CompanyID       pgtype.Int4        `db:"company_id" json:"company_id"`
	ImageLink       string             `db:"image_link" json:"image_link"`
	AvailableStocks int32              `db:"available_stocks" json:"available_stocks"`
	IsNegotiable    bool               `db:"is_negotiable" json:"is_negotiable"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.OwnerID,
		arg.CompanyID,
		arg.ImageLink,
		arg.AvailableStocks,
		arg.IsNegotiable,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageLink,
		&i.Description,
		&i.AvailableStocks,
		&i.Price,
		&i.IsNegotiable,
		&i.OwnerID,
		&i.CompanyID,
		&i.Likes,
		&i.Sold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM products WHERE id = $1 RETURNING id, name, image_link, description, available_stocks, price, is_negotiable, owner_id, company_id, likes, sold, created_at, updated_at
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageLink,
		&i.Description,
		&i.AvailableStocks,
		&i.Price,
		&i.IsNegotiable,
		&i.OwnerID,
		&i.CompanyID,
		&i.Likes,
		&i.Sold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, image_link, description, available_stocks, price, is_negotiable, owner_id, company_id, likes, sold, created_at, updated_at FROM products WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageLink,
		&i.Description,
		&i.AvailableStocks,
		&i.Price,
		&i.IsNegotiable,
		&i.OwnerID,
		&i.CompanyID,
		&i.Likes,
		&i.Sold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, image_link, description, available_stocks, price, is_negotiable, owner_id, company_id, likes, sold, created_at, updated_at FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageLink,
			&i.Description,
			&i.AvailableStocks,
			&i.Price,
			&i.IsNegotiable,
			&i.OwnerID,
			&i.CompanyID,
			&i.Likes,
			&i.Sold,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchProducts = `-- name: SearchProducts :many
SELECT id, name, image_link, description, available_stocks, price, is_negotiable, owner_id, company_id, likes, sold, created_at, updated_at FROM products
WHERE name ILIKE '%' || $1 || '%'
OR description ILIKE '%' || $1 || '%'
ORDER BY id
`

func (q *Queries) SearchProducts(ctx context.Context, dollar_1 pgtype.Text) ([]Product, error) {
	rows, err := q.db.Query(ctx, searchProducts, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageLink,
			&i.Description,
			&i.AvailableStocks,
			&i.Price,
			&i.IsNegotiable,
			&i.OwnerID,
			&i.CompanyID,
			&i.Likes,
			&i.Sold,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET 
    name = coalesce($1, name),
    description = coalesce($2, description),
    price = coalesce($3, price),
    image_link = coalesce($4, image_link),
    available_stocks = coalesce($5, available_stocks),
    is_negotiable = coalesce($6, is_negotiable),
    company_id = coalesce($7, company_id),
    sold = coalesce($8, sold)
WHERE id = $9
RETURNING id, name, image_link, description, available_stocks, price, is_negotiable, owner_id, company_id, likes, sold, created_at, updated_at
`

type UpdateProductParams struct {
	Name            pgtype.Text `db:"name" json:"name"`
	Description     pgtype.Text `db:"description" json:"description"`
	Price           pgtype.Int4 `db:"price" json:"price"`
	ImageLink       pgtype.Text `db:"image_link" json:"image_link"`
	AvailableStocks pgtype.Int4 `db:"available_stocks" json:"available_stocks"`
	IsNegotiable    pgtype.Bool `db:"is_negotiable" json:"is_negotiable"`
	CompanyID       pgtype.Int4 `db:"company_id" json:"company_id"`
	Sold            pgtype.Bool `db:"sold" json:"sold"`
	ID              int32       `db:"id" json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.ImageLink,
		arg.AvailableStocks,
		arg.IsNegotiable,
		arg.CompanyID,
		arg.Sold,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageLink,
		&i.Description,
		&i.AvailableStocks,
		&i.Price,
		&i.IsNegotiable,
		&i.OwnerID,
		&i.CompanyID,
		&i.Likes,
		&i.Sold,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
