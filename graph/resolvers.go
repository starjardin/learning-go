package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
	db "github.com/starjardin/onja-products/db/sqlc"
	"github.com/starjardin/onja-products/graph/model"
	"github.com/starjardin/onja-products/utils"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	hashedPassword, err := utils.HashedPassword(input.Password)

	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %w", err)
	}

	email := input.Email

	userByEmail, err := r.Resolver.Queries.GetUserByEmail(ctx, email)

	if err != nil && err.Error() != "no rows in result set" {
		return nil, fmt.Errorf("failed to check if user exists by email: %w", err)
	}

	if err == nil && userByEmail.Email == email {
		return nil, fmt.Errorf("user with email %s already exists", email)
	}

	user, err := r.Resolver.Queries.CreateUser(ctx, db.CreateUserParams{
		Username:         input.Username,
		HashedPassword:   hashedPassword,
		Email:            input.Email,
		FullName:         input.FullName,
		Address:          input.Address,
		PhoneNumber:      input.PhoneNumber,
		PaymentMethod:    input.PaymentMethod,
		PasswordChangeAt: pgtype.Timestamptz{Time: time.Now(), Valid: true},
		CompanyID:        pgtype.Int4{Valid: input.CompanyID != nil, Int32: int32(*input.CompanyID)},
	})

	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	return &model.User{
		ID:            fmt.Sprintf("%d", user.ID),
		Username:      user.Username,
		Email:         user.Email,
		FullName:      user.FullName,
		Address:       user.Address,
		PhoneNumber:   user.PhoneNumber,
		PaymentMethod: user.PaymentMethod,
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	userID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	params := db.UpdateUserParams{
		ID: int32(userID),
	}

	if input.Password != nil {
		hashedPassword, err := utils.HashedPassword(*input.Password)
		if err != nil {
			return nil, fmt.Errorf("failed to hash password: %w", err)
		}
		params.HashedPassword = pgtype.Text{Valid: true, String: hashedPassword}
		params.PasswordChangeAt = pgtype.Timestamptz{Time: time.Now(), Valid: true}
	}

	if input.Username != nil {
		params.Username = pgtype.Text{Valid: true, String: *input.Username}
	}

	if input.Email != nil {
		params.Email = pgtype.Text{Valid: true, String: *input.Email}
	}

	if input.FullName != nil {
		params.FullName = pgtype.Text{Valid: true, String: *input.FullName}
	}

	if input.Address != nil {
		params.Address = pgtype.Text{Valid: true, String: *input.Address}
	}

	if input.PhoneNumber != nil {
		params.PhoneNumber = pgtype.Text{Valid: true, String: *input.PhoneNumber}
	}

	if input.PaymentMethod != nil {
		params.PaymentMethod = pgtype.Text{Valid: true, String: *input.PaymentMethod}
	}

	if input.CompanyID != nil {
		params.CompanyID = pgtype.Int4{Valid: true, Int32: int32(*input.CompanyID)}
	} else {
		params.CompanyID = pgtype.Int4{Valid: false}
	}

	user, err := r.Resolver.Queries.UpdateUser(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to update user: %w", err)
	}

	return &model.User{
		ID:            fmt.Sprintf("%d", user.ID),
		Username:      user.Username,
		Email:         user.Email,
		FullName:      user.FullName,
		Address:       user.Address,
		PhoneNumber:   user.PhoneNumber,
		PaymentMethod: user.PaymentMethod,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	userID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return false, fmt.Errorf("invalid user ID: %w", err)
	}

	err = r.Resolver.Queries.DeleteUser(ctx, int32(userID))
	if err != nil {
		return false, fmt.Errorf("failed to delete user: %w", err)
	}

	return true, nil
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, name string) (*model.Company, error) {
	company, err := r.Resolver.Queries.CreateCompany(ctx, name)
	if err != nil {
		return nil, fmt.Errorf("failed to create company: %w", err)
	}

	return &model.Company{
		ID:   fmt.Sprintf("%d", company.ID),
		Name: company.Name,
	}, nil
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, id string, name string) (*model.Company, error) {
	panic(fmt.Errorf("not implemented: UpdateCompany - updateCompany"))
}

// DeleteCompany is the resolver for the deleteCompany field.
func (r *mutationResolver) DeleteCompany(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCompany - deleteCompany"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	userID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID: %w", err)
	}

	user, err := r.Resolver.Queries.GetUser(ctx, int32(userID))
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	return &model.User{
		ID:            fmt.Sprintf("%d", user.ID),
		Username:      user.Username,
		Email:         user.Email,
		FullName:      user.FullName,
		Address:       user.Address,
		PhoneNumber:   user.PhoneNumber,
		PaymentMethod: user.PaymentMethod,
	}, nil
}

// ListUsers is the resolver for the listUsers field.
func (r *queryResolver) ListUsers(ctx context.Context) ([]*model.User, error) {
	users, err := r.Resolver.Queries.GetUsers(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get users: %w", err)
	}

	var result []*model.User
	for _, user := range users {
		result = append(result, &model.User{
			ID:            fmt.Sprintf("%d", user.ID),
			Username:      user.Username,
			Email:         user.Email,
			FullName:      user.FullName,
			Address:       user.Address,
			PhoneNumber:   user.PhoneNumber,
			PaymentMethod: user.PaymentMethod,
		})
	}

	return result, nil
}

// GetCompanies is the resolver for the getCompanies field.
func (r *queryResolver) GetCompanies(ctx context.Context) ([]*model.Company, error) {
	companies, err := r.Resolver.Queries.GetCompanies(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get companies: %w", err)
	}

	var result []*model.Company
	for _, company := range companies {
		result = append(result, &model.Company{
			ID:   fmt.Sprintf("%d", company.ID),
			Name: company.Name,
		})
	}

	return result, nil
}

// GetCompany is the resolver for the getCompany field.
func (r *queryResolver) GetCompany(ctx context.Context, id string) (*model.Company, error) {
	companyID, err := strconv.ParseInt(id, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid company ID: %w", err)
	}

	company, err := r.Resolver.Queries.GetCompany(ctx, int32(companyID))
	if err != nil {
		return nil, fmt.Errorf("failed to get company: %w", err)
	}

	return &model.Company{
		ID:   fmt.Sprintf("%d", company.ID),
		Name: company.Name,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
